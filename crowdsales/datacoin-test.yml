# A testnet deployment for the crowdsale contracts
rinkeby:

    # Chain we are connected to.
    # Either "mainnet" or "ropsten".
    # Affects Etherscan verification process only.
    chain: rinkeby

    # Do we perform deployed contract source code verification on etherscan.io service.
    # This is a semi automatic process using a Chrome browser.
    verify_on_etherscan: yes

    #               B  M  k   tokens
    totalCoins:    1000000000
    totalTeamCoins: 150000000
    companyCoins:   150000000

    nikke:  "0xDdc8963569BC7f237FEe4EAf129d26D276FcF22e"
    risto:  "0x9e3d69305da51f34ee29bfb52721e3a824d59e69"
    henri:  "0x8d4DEED6231427Af94c5DB64DF616e244A86fb68"
    juuso:  "0xb3428050eA2448eD2E4409bE47E1a50EBac0B2d2"
    aapeli: "0x26aa20a3ca450537f1bb5b037facd513c723153b"
    eric:   "0x0a70ed3bc440401e51c5b714b504b24d144413bb"

    #
    # Contracts section defines different smart contracts that
    # are required to run the ICO.
    #
    contracts:

        # Team multisignature wallet.
        #
        # This contract deploys the team multisignature wallet.
        # One we use here is based one by Gavin Wood.
        #
        # Multiple escrow key holders are required to take action to move
        # funds around.
        #
        # All crowdsale collected funds are deposited to the this multisig wallet in real time.
        #
        company_wallet:
            contract_name: MultiSigWallet
            contract_file: GnosisWallet.sol
            arguments:
                _owners:
                    - "{{ nikke }}"
                    - "{{ risto }}"
                    - "{{ henri }}"
                _required: 2

        #
        # Pre-ICO fund collector
        #
        # Pre-ICO contract allows high volume investors to place their
        # Pre-ICO has a minimum buy in defined as volume.
        # Pre-ICO investments have a preferred pricing (see later).
        #
        # Pre-ICO owner (team multisig) can set the ICO contract address
        # later, it does not have to be availalble at the start of the ICO.
        # After the ICO contract is set, anyone can trigger the moving of funds
        # to the ICO contract.
        #
        # If the actual ICO does not happen, the investors can claim refund
        # after freezeEndsAt date.
        #
        #preico:
        #    contract_name: PresaleFundCollector
        #    contract_file: PresaleFundCollector.sol
        #    arguments:
        #        _owner: "{{contracts.company_wallet.address}}"
        #        # Set 30 days in the future from the moment of deployment
        #        _freezeEndsAt: "{{ time() + 30*24*3600 }}"
        #        _weiMinimumLimit: "{{ to_wei(750, 'ether') }}"

        #
        # Token contract
        #
        # This contract represents ERC-20 token.
        # It has transfer lock up functionality to prevent the token to be transferable
        # until the ICO is over. Furthermore it has dynamic minting supply,
        # so that the crowdsale contract will create new tokens as investment arrives in.
        # This way, there is no need for a separate burn stage at the end of the crowdsale,
        # as we never create the exceeding supply.
        #
        #
        token:
            contract_name: CrowdsaleToken
            contract_file: CrowdsaleToken.sol
            arguments:
                _name: DATAcoin-test
                _symbol: DATA
                _initialSupply: 0
                _decimals: 18
                _mintable: true

        # Token vault for freezing team's tokens
        team_vault:
            contract_name: TokenVault
            contract_file: TokenVault.sol
            arguments:
                #_owner: "{{contracts.company_wallet.address}}"
                _freezeEndsAt: "{{ time() + 365*24*3600 }}" # 1 year freeze
                _token: "{{contracts.token.address}}"
                _tokensToBeAllocated: "{{ totalTeamCoins * 10**18 }}" # in "atomic units" (10^18 per full token)
        #
        # Pricing strategy
        #
        # Pricing strategy defines the price of a token in the different stages of the crowdsale.
        # Here we use milestone based pricing that has a different price for the token every week of the crowdale.
        #
        # We also give a preferred price for pre-ICO investors.
        #
        #
        pricing_strategy:
            contract_name: FlatPricing
            contract_file: FlatPricing.sol
            arguments:
                # 1 ETH = 1000 token  => 10^18 wei = 1000 token => 1 token = 10^18 wei / 1000
                _oneTokenInWei: "{{ (10**18 / 1000 ) | round | int }}"

        #
        # Crowdsale
        #
        # This is the actual crowdsale contract.
        # It will accept investments during the crowdsale time period.
        # For each investments, it asks the pricing contract for the
        # current price for this particular investor.
        #
        #
        #
        crowdsale:
            contract_name: MintedTokenCappedCrowdsale
            contract_file: MintedTokenCappedCrowdsale.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _pricingStrategy: "{{contracts.pricing_strategy.address}}"
                _multisigWallet: "{{contracts.company_wallet.address}}"
                _start: "{{ time() + 15*60 }}" # starts in 15 minutes
                _end: "{{ time() + 28*24*3600 }}" # ends in 4 weeks
                #_start: "{{ timestamp(datetime(2017, 7, 14, 16, 0)) }}" what timezone is this?
                #_end: "{{ timestamp(datetime(2017, 7, 14, 16, 0)) + 30*24*3600 }}" what timezone is this?
                _minimumFundingGoal: 0
                _maximumSellableTokens: "{{ (totalCoins - totalTeamCoins - companyCoins) * 10**18 }}" # in "atomic units" (10^18 per full token)
        #
        # Finalize contract
        #
        # Finalize contract defines what happens at the end of the successful crowdsale.
        #
        # The bonus finalize agent we define here 1) makes tokens transferable by releasing
        # the transfer restrictions 2) mints 25% new tokens for the team to be
        # reserved for founders, bounties and such. These new tokens are deposited in the
        # team multisig wallet.
        #
        finalize_agent:
            contract_name: DefaultFinalizeAgent
            contract_file: DefaultFinalizeAgent.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _crowdsale: "{{contracts.crowdsale.address}}"

    # Post-deployment actions connect contracts together.
    # They set ownership and allowed actions, so that contracts can interact
    post_actions: |
        # Enable new token minting by a crowdsale contract
        token.transact({"from": deploy_address}).setMintAgent(crowdsale.address, True)

        # Set actions what happen at the end of the crodsale.
        # Enable token mintint at the end of the crowdsale to create bonus pool, founder pool and such
        crowdsale.transact({"from": deploy_address}).setFinalizeAgent(finalize_agent.address)
        token.transact({"from": deploy_address}).setMintAgent(finalize_agent.address, True)
        token.transact({"from": deploy_address}).setReleaseAgent(finalize_agent.address)
        token.transact({"from": deploy_address}).setReleaseAgent(finalize_agent.address)

        # Team and company allocations
        crowdsale.transact({"from": deploy_address}).preallocate(company_wallet.address, companyCoins, 0)
        crowdsale.transact({"from": deploy_address}).preallocate(team_vault.address, totalTeamCoins, 0)
        team_vault.transact({"from": deploy_address}).setInvestor(juuso, 50 * 10**6 * 10**18) # in "atomic units" (10^18 per full token)
        team_vault.transact({"from": deploy_address}).setInvestor(aapeli, 50 * 10**6 * 10**18) # in "atomic units" (10^18 per full token)
        team_vault.transact({"from": deploy_address}).setInvestor(eric, 50 * 10**6 * 10**18) # in "atomic units" (10^18 per full token)
        team_vault.transact({"from": deploy_address}).lock()

        # Presale allocations
        #fat_cat = "0xb3428050eA2448eD2E4409bE47E1a50EBac0B2d2"
        #crowdsale.transact({"from": deploy_address}).preallocate(fat_cat, 1000, 100000)

        # Move ownership of all owned contracts to the team multisig address
        crowdsale.transact({"from": deploy_address}).transferOwnership(company_wallet.address)
        token.transact({"from": deploy_address}).transferOwnership(company_wallet.address)

    # Make sure that everything we have deployed all contracts in good state
    # and their internal state is sane
    verify_actions: |
        assert token.call().owner() == company_wallet.address
        assert crowdsale.call().owner() == company_wallet.address
        assert finalize_agent.call().isSane()
        assert crowdsale.call().getState() == CrowdsaleState.PreFunding
